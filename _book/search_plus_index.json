{"./":{"url":"./","title":"Introduction","keywords":"","body":"TreeviewCopyright © 1141134779@qq,com 2020 all right reserved, powered by aleen42 Bourbon的个人博客 关于我 关于博客 Bourbon的个人博客 关于我 软件工程本科在读。 现居重庆。 热爱技术，分享和生活。 主要学习golang服务端开发，也可能涉及到前端，计算机基础，设计模式等。 关于博客 本博客使用Gitbook开发， 用以记录学习中的收获，以及开发过程中的问题。同时希望分享给有需要的同学。 如有错误，希望联系改正。欢迎交流探讨。 如果本博客能够帮助到您，欢迎打赏。 github：https://github.com/BourbonWang email: 1141134779@qq.com Copyright © 1141134779@qq.com 2020 all right reserved，powered by GitbookFile Modify: 2021-01-06 21:32:25 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"golang/list.html":{"url":"golang/list.html","title":"常用库 container/list","keywords":"","body":"TreeviewCopyright © 1141134779@qq,com 2020 all right reserved, powered by aleen42 container/list 包学习笔记 函数和功能 节点 链表 使用 创建链表 操作 遍历链表 数据结构实现 节点 链表 插入 移除 移动 container/list 包学习笔记 golang 的链表list的使用和具体实现。list对存储的元素并没有类型限制，比较方便。实现方式值得学习借鉴。 函数和功能 首先列出节点和链表的成员函数和功能。 节点 Next() ：前趋指针 Prev() ：后趋指针 链表 Init() ：初始化链表 Len() ：链表长度 Front() ：返回第一个节点的指针 Back() ：返回最后一个节点的指针 Remove(e) ：删除节点e，返回e的值 PushFront(value) ：将value加入链表头部，返回该节点 PushBack(value) ：将value加入链表尾部，返回该节点 InsertBefore(value, e) ：将value插入节点e之前，返回该节点 InsertAfter(value, e) ：将value插入节点e之后，返回该节点 MoveToFront(e) ：将节点e移动到链表头部 MoveToBack(e) ：将节点e移动到链表尾部 MoveBefore(e, mark) ：将节点e移动到节点mark前面 MoveAfter(e, mark) ：将节点e移动到节点mark后面 PushBackList(list) ：将另一个链表list连接到本链表尾部 PushFrontList(list) ：将另一个链表list连接到本链表头部 使用 创建链表 //使用提供的New()进行初始化 l := list.New() //使用var关键字 var l list.List 操作 l := list.New() l.PushBack(1) // 1 e := l.PushBack(2) // 1,2 l.PushFront(3) // 3,1,2 e = l.InsertBefore(4,e) // 3,1,4,2 e = l.InsertAfter(5,e) // 3,1,4,5,2 l.MoveToBack(e) // 3,1,4,2,5 l2 := list.New() l2.PushBack(7) l2.PushBack(8) l2.PushBack(9) //l2: 7,8,9 l.PushBackList(l2) //l: 3,1,4,2,5,7,8,9 l.PushFrontList(l2) //l: 7,8,9,3,1,4,2,5,7,8,9 遍历链表 for e := l.Front(); e != nil; e = e.Next() { // do something with e.Value } 数据结构实现 golang 的 list 使用双向环形链表实现。用一个root节点同时表示头节点和尾节点，第一个元素root.next，最后一个元素root.prev。root本身不存储数据。 节点 首先看节点的数据结构，list存放节点属于的链表，用来检验操作的节点是否属于该链表，避免非法传参。value存储值，可以为任何类型。 type Element struct { next, prev *Element // The list to which this element belongs. list *List // The value stored with this element. Value interface{} } 成员函数有Next()和Prev(): func (e *Element) Next() *Element { if p := e.next; e.list != nil && p != &e.list.root { return p } return nil } 链表 type List struct { root Element len int } 元素的操作依靠root节点。除了root节点外，len存储节点个数，不包括root。 初始化 func (l *List) Init() *List { l.root.next = &l.root l.root.prev = &l.root l.len = 0 return l } // New returns an initialized list. func New() *List { return new(List).Init() } Front()和Back()可以看出root节点同时作为头节点和尾节点 func (l *List) Front() *Element { if l.len == 0 { return nil } return l.root.next } func (l *List) Back() *Element { if l.len == 0 { return nil } return l.root.prev } 插入 对于插入操作，首先实现了节点到节点的插入，然后在其上封装了value到节点的插入，可用于之后的各种插入操作。 func (l *List) insert(e, at *Element) *Element { e.prev = at e.next = at.next e.prev.next = e e.next.prev = e e.list = l l.len++ return e } func (l *List) insertValue(v interface{}, at *Element) *Element { return l.insert(&Element{Value: v}, at) } 所以可以容易得到PushFront()和PushBack()的实现 func (l *List) PushFront(v interface{}) *Element { l.lazyInit() return l.insertValue(v, &l.root) } func (l *List) PushBack(v interface{}) *Element { l.lazyInit() return l.insertValue(v, l.root.prev) } 注意这里使用了懒加载，在第一次使用到的时候再进行初始化 func (l *List) lazyInit() { if l.root.next == nil { l.Init() } } InsertBefore()和InsertAfter()同理，要记得检验节点是否属于该链表 func (l *List) InsertBefore(v interface{}, mark *Element) *Element { if mark.list != l { return nil } return l.insertValue(v, mark.prev) } PushBackList()和PushFrontList()是合并链表的操作。同样依赖于基本的插入操作。对传入的链表进行遍历，插入到对应的位置。 func (l *List) PushBackList(other *List) { l.lazyInit() for i, e := other.Len(), other.Front(); i > 0; i, e = i-1, e.Next() { l.insertValue(e.Value, l.root.prev) } } func (l *List) PushFrontList(other *List) { l.lazyInit() for i, e := other.Len(), other.Back(); i > 0; i, e = i-1, e.Prev() { l.insertValue(e.Value, &l.root) } } 移除 移除操作的基本操作remove()，双链表的移除，把没用的指针设为nil func (l *List) remove(e *Element) *Element { e.prev.next = e.next e.next.prev = e.prev e.next = nil // avoid memory leaks e.prev = nil // avoid memory leaks e.list = nil l.len-- return e } 然后封装得到Remove()，同样应当检查要删除的节点是否属于该链表 func (l *List) Remove(e *Element) interface{} { if e.list == l { l.remove(e) } return e.Value } 移动 实现节点到节点的移动 func (l *List) move(e, at *Element) *Element { if e == at { return e } e.prev.next = e.next e.next.prev = e.prev e.prev = at e.next = at.next e.prev.next = e e.next.prev = e return e } 然后基于这个可以实现各种移动操作 func (l *List) MoveToFront(e *Element) { if e.list != l || l.root.next == e { return } l.move(e, &l.root) } func (l *List) MoveToBack(e *Element) { if e.list != l || l.root.prev == e { return } l.move(e, l.root.prev) } func (l *List) MoveBefore(e, mark *Element) { if e.list != l || e == mark || mark.list != l { return } l.move(e, mark.prev) } func (l *List) MoveAfter(e, mark *Element) { if e.list != l || e == mark || mark.list != l { return } l.move(e, mark) } Copyright © 1141134779@qq.com 2020 all right reserved，powered by GitbookFile Modify: 2020-12-31 15:01:10 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"other/git.html":{"url":"other/git.html","title":"Git同步本地项目到Github","keywords":"","body":"TreeviewCopyright © 1141134779@qq,com 2020 all right reserved, powered by aleen42 Git同步本地项目到Github 本地git获取github提交权限 设置用户名和邮箱 生成ssh密钥 复制到github 测试完成 创建本地仓库 创建远程仓库 将本地仓库同步到远程仓库 添加远程仓库 将本地仓库的内容push到远程仓库的master分支 Git同步本地项目到Github 将本地的项目同步到github上，这样可以随时pull到本地，修改完后再push到github仓库。可以随时随地修改代码，也避免了项目的丢失的风险。 本地git获取github提交权限 设置用户名和邮箱 git config --global user.name 'your_name' git config --global user.email 'your_email' 生成ssh密钥 ssh-keygen -t rsa -C 'your_email' 提示设置存储位置和口令等，回车跳过。默认存储在 ~/.ssh/id_rsa.pub 复制到github 将生成的id_rsa.pub文件中的公钥复制到github的setting / SSH AND GPG KEY / SSH keys 测试完成 ssh git@github.com 提示 successfully authenticated 则成功。 创建本地仓库 cd到项目目录 git init 初始化git仓库 git add . 把所有项目文件添加到提交暂存区 git commit -m '提交说明' 把暂存区中的内容提交到仓库 创建远程仓库 github新建仓库，假设仓库名为[resName] 将本地仓库同步到远程仓库 添加远程仓库 git remote add origin git@github.com:[githubUerName]/[resName] 将本地仓库的内容push到远程仓库的master分支 git push -u origin master push的-u参数是设置本地仓库默认的upstream,这里就是把本地仓库同远程仓库的master分支进行关联，之后你在这个仓库pull时不带参数也默认从master分支拉取. Copyright © 1141134779@qq.com 2020 all right reserved，powered by GitbookFile Modify: 2021-01-03 22:08:03 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"other/gitbook.html":{"url":"other/gitbook.html","title":"使用 Gitbook 搭建博客","keywords":"","body":"TreeviewCopyright © 1141134779@qq,com 2020 all right reserved, powered by aleen42 使用 Gitbook 搭建博客 安装 node.js 编辑工具 Gitbook 初始化 目录 启动服务 插件 使用 Gitbook 搭建博客 gitbook 使用markdown 编写，简单易用。通过配置插件，也可以添加很多主题和小功能。适合搭建博客，电子书等。 安装 node.js gitbook是一个基于Node.js的命令行工具，所以要先安装Node.js(下载地址https://nodejs.org/en/，找到对应平台的版本安装即可)。 或使用包管理安装。 apt-get install nodejs 安装Gitbook： npm install -g gitbook-cli 编辑工具 typora：https://www.typora.io/ apt-get install typora Gitbook 初始化 在空文件夹中执行 gitbook init 文件夹中将多两个文件 README.md ：封面介绍 SUMMARY.md ：配置目录结构 目录 编辑SUMMARY.md # Summary * [Introduction](README.md) * [前言](readme.md) * [第一章](part1/README.md) * [第一节](part1/1.md) * [第二节](part1/2.md) * [第三节](part1/3.md) * [第四节](part1/4.md) * [第二章](part2/README.md) * [第三章](part3/README.md) * [第四章](part4/README.md) 编辑后执行 gitbook init 将自动按以上目录寻找或创建文件。 每一篇文章都是一个.md文件，这样就可以开始写博客了。 启动服务 编辑好文件后，执行 gitbook init gitbook serve gitbook将在本地4000端口启动服务。浏览器访问 http://localhost:4000/ 至此，已经可以使用 gitbook 搭建博客了。 插件 文件夹下创建 book.json ，如果已有，就直接打开。 配置插件等都是在这里，也可以复制别人的配置项。 plugins 是配置插件的位置，gitbook自带了5个插件，在名字前面加 - 可以禁用插件： sharing：右上角分享功能 font-settings：字体设置（左上方的\"A\"符号） livereload：为 GitBook 实时重新加载 highlight： 代码高亮 search： 导航栏查询功能（不支持中文） 推荐几个我在使用的插件： page-treeview：每篇文档头部生成标题树 code：为代码块添加行号和复制按钮 pageview-count：阅读量计数 popup：插件用于点击图片时，打开新的网页用来查看高清大图。 tbfed-pagefooter：在每个页面的最下方自动添加页脚信息 favicon：修改网页标题的图标 search-plus：原搜索插件不支持中文搜索，所以使用该插件进行替换。 expandable-chapters 和 chapter-fold ：导航目录 hide-element：隐藏界面元素 back-to-top-button：返回顶部按钮 splitter：侧边栏可自行调整宽度 sharing-plus：分享当前页面，比默认的 sharing 插件多了一些分享方式。 donate：打赏模块，在每篇文章底部都会加上一个按钮，点击显示图片 github：右上角跳转到 github 主页 附上我的配置文件 { \"author\": \"Bourbon\", \"description\": \"学习，记录，分享，进步\", \"extension\": null, \"generator\": \"site\", \"isbn\": \"\", \"links\": { \"sharing\": { \"all\": null, \"facebook\": null, \"google\": null, \"twitter\": null, \"weibo\": null } }, \"output\": null, \"pdf\": { \"fontSize\": 12, \"footerTemplate\": null, \"headerTemplate\": null, \"margin\": { \"bottom\": 36, \"left\": 62, \"right\": 62, \"top\": 36 }, \"pageNumbers\": true, \"paperSize\": \"a4\" }, \"plugins\": [ \"page-treeview\", \"code\", \"pageview-count\", \"popup\", \"tbfed-pagefooter\", \"favicon\", \"search-plus\", \"expandable-chapters\", \"hide-element\", \"back-to-top-button\", \"splitter\", \"-lunr\", \"-search\", \"-sharing\", \"sharing-plus\", \"chapter-fold\", \"donate\", \"github\" ], \"pluginsConfig\": { \"code\": { \"copyButtons\": false }, \"hide-element\": { \"elements\": [\".gitbook-link\"] }, \"tbfed-pagefooter\": { \"copyright\": \"Copyright © 1141134779@qq.com 2020\" }, \"favicon\": { \"shortcut\": \"assert/favicon.ico\", \"bookmark\": \"assert/favicon.ico\", \"appleTouch\": \"assert/favicon.ico\", \"appleTouchMore\": { \"120x120\": \"assert/favicon.ico\", \"180x180\": \"assert/favicon.ico\" } }, \"fontsettings\": { \"theme\": \"white\", \"family\": \"sans\", \"size\": 2 }, \"page-treeview\": { \"copyright\": \"Copyright © 1141134779@qq,com 2020\", \"minHeaderCount\": \"2\", \"minHeaderDeep\": \"2\" }, \"sharing\": { \"all\": [\"facebook\", \"google\", \"linkedin\", \"twitter\", \"weibo\", \"qq\"] }, \"donate\": { \"wechat\": \"/assert/wechat.jpg\", \"alipay\": \"/assert/alipay.jpg\", \"title\": \"\", \"button\": \"赏\", \"alipayText\": \"支付宝打赏\", \"wechatText\": \"微信打赏\" }, \"github\": { \"url\": \"https://github.com/BourbonWang\" } }, \"language\": \"zh-hans\", \"title\": \"Bourbon\", \"variables\": {}, \"styles\": { \"website\": \"/assert/styles/website.css\" } } Copyright © 1141134779@qq.com 2020 all right reserved，powered by GitbookFile Modify: 2021-01-06 22:30:28 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}